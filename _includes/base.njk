<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Sintoniza Latina Live, tu radio online con la mejor m√∫sica. Escucha en vivo, pide tus canciones favoritas y conecta con tu alma a trav√©s de la m√∫sica.">
    
    <title>{{ title }}</title>
    
    <!-- Hoja de estilos de Sakura (para el tema claro y oscuro) -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sakura.css/css/sakura.css" type="text/css">
    <link rel="stylesheet" href="/css/custom.css">
    <link rel="icon" href="favicon.ico" type="image/x-icon">

    <!-- Estilos para el bot√≥n de cambio de tema -->
    <style>
        #theme-toggle {
            position: fixed; top: 15px; right: 15px;
            background-color: #f0f0f0; border: 1px solid #ccc;
            border-radius: 50%; width: 45px; height: 45px;
            cursor: pointer; font-size: 20px; z-index: 1000;
        }
        body.dark #theme-toggle {
            background-color: #333; border-color: #555; color: #fff;
        }
    </style>
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "RadioBroadcastService",
  "name": "Latina Live",
  "description": "Tu alma, tu m√∫sica. La radio online con la mejor m√∫sica latina y una comunidad vibrante.",
  "url": "https://latina.ahmrs.net/",
  "image": "https://latina.ahmrs.net/logo.jpg",
  "broadcastFrequency": "online"
}
</script>
<!-- Open Graph / Facebook -->
<meta property="og:type" content="website">
<meta property="og:url" content="https://latina.ahmrs.net/">
<meta property="og:title" content="Latina Live - tu alma, tu m√∫sica">
<meta property="og:description" content="Sintoniza en vivo la mejor m√∫sica, pide tus canciones y conecta con nuestra comunidad.">
<meta property="og:image" content="https://latina.ahmrs.net/logo.jpg">

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image">
<meta property="twitter:url" content="https://latina.ahmrs.net/">
<meta property="twitter:title" content="Latina Live - tu alma, tu m√∫sica">
<meta property="twitter:description" content="Sintoniza en vivo la mejor m√∫sica, pide tus canciones y conecta con nuestra comunidad.">
<meta property="twitter:image" content="https://latina.ahmrs.net/logo.jpg">
</head>

<!-- A√±adimos una clase 'light' por defecto al body para controlar el tema -->
<body class="light">

    <!-- BOT√ìN PARA CAMBIAR EL TEMA -->
    <button id="theme-toggle" aria-label="Cambiar entre tema claro y oscuro">üåô</button>

    <!-- La cabecera se mantiene igual en todas las p√°ginas -->
    <header class="welcome-section">
        <h2>¬°Latina Live!</h2>
        <img src="/img/logo.jpg" alt="Un micr√≥fono encantador con una sonrisa c√°lida...">
        <p>¬°Bienvenido a tu apertura auditiva!</p>
        <p>La m√∫sica es tan antigua como el hombre y tan importante como el ox√≠geno. Desde que el mundo es mundo hemos usado la m√∫sica con diferentes finalidades: el placer, la motivaci√≥n, las batallas, los rituales. Hombre y arte se necesitan para existir, el primero para admirarla y la segunda para ser sublimada en sus usos. Los esclavos, en sus danzas han ocultado t√°cticas para huir de sus captores, en sus peinados mapas y en sus ropas armas. La m√∫sica es un legado, es historia, es cultura. Por esto estamos nosotros aqu√≠, dispuestos a abrirte los o√≠dos, a hacerte consciente de que si se viaja en cada libro, se visita en cada canci√≥n un trozo distinto de nosotros. Latina Live ha llegado para mostrarte tu alma, tu m√∫sica, para llevarte por los pasadizos m√°s oscuros de las melod√≠as hasta los claros m√°s dulces y reverdecidos de la misma. La pregunta no es si quieres escucharnos, la pregunta es: ¬øQuieres escucharte a ti?
        </p>
    </header>

    <!-- Aqu√≠ Eleventy inyectar√° el contenido de cada p√°gina -->
    {{ content | safe }}

    <!-- El pie de p√°gina se mantiene igual en todas las p√°ginas -->
    <footer class="site-footer">
        <p>&copy; 2025 Latina Live</p>
    </footer>
    
    <!-- Placeholder para Font Awesome -->
    <script src="https://kit.fontawesome.com/your_fontawesome_kit.js" crossorigin="anonymous"></script>

    <!-- ======================================================= -->
<!-- ======================================================= -->
<!--          INICIO DEL SCRIPT UNIFICADO FINAL              -->
<!-- ======================================================= -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    
    // --- L√ìGICA DEL CAMBIADOR DE TEMA ---
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
        // ... (la l√≥gica del tema se queda igual) ...
    }

    // --- L√ìGICA DEL REPRODUCTOR DE AUDIO ---
    const audio = document.getElementById('audio');
    if (audio) {
        // ... (la l√≥gica del reproductor se queda igual) ...
    }

    // --- L√ìGICA DEL WIDGET DE NOVEDADES DE SPOTIFY ---
    const releasesContainer = document.getElementById('new-releases-container');
    if (releasesContainer) {
        async function loadNewReleases() {
            // ... (la l√≥gica de Spotify se queda igual) ...
        }
        loadNewReleases();
    }


    // ==============================================================
    // --- L√ìGICA DEL NUEVO WIDGET DE PEDIDOS DE CANCIONES (AZURACAST) ---
    // ==============================================================
    const requestsWidgetContainer = document.querySelector('.song-requests-widget');
    
    // Solo ejecutamos este c√≥digo si encontramos el widget en la p√°gina actual
    if (requestsWidgetContainer) {
        
        // --- CONFIGURACI√ìN ---
        const STATION_ID = 1; // ¬°ASEG√öRATE DE QUE ESTE ID ES EL CORRECTO!

        // --- B√∫squeda de elementos dentro del widget ---
        const searchBox = requestsWidgetContainer.querySelector('#search-box');
        const resultsContainer = requestsWidgetContainer.querySelector('#results-container');
        const statusMessage = requestsWidgetContainer.querySelector('#status-message');
        let allSongs = [];

        function showStatus(message, isSuccess = true) {
            if (!statusMessage) return;
            statusMessage.textContent = message;
            statusMessage.className = isSuccess ? 'status-success' : 'status-error';
            statusMessage.style.display = 'block';
            setTimeout(() => { statusMessage.style.display = 'none'; }, 5000);
        }

        function renderSongs(songs) {
            if (!resultsContainer) return;
            resultsContainer.innerHTML = '';
            if (!songs || songs.length === 0) {
                resultsContainer.innerHTML = '<p>No se encontraron canciones con ese criterio.</p>';
                return;
            }

            songs.forEach(song => {
                const songDiv = document.createElement('div');
                songDiv.className = 'song-item';
                songDiv.innerHTML = `
                    <div class="song-info">
                        <span class="song-title">${song.song.title}</span>
                        <span class="song-artist">${song.song.artist}</span>
                    </div>
                    <button class="request-btn" data-request-id="${song.request_id}">Pedir</button>
                `;
                resultsContainer.appendChild(songDiv);
            });
        }

        async function fetchSongs() {
            try {
                const response = await fetch(`/api/get-request-list/${STATION_ID}`);
                if (!response.ok) {
                    throw new Error(`El servidor respondi√≥ con un error: ${response.status}`);
                }
                const songs = await response.json();
                if (songs.error) {
                    throw new Error(songs.error);
                }

                allSongs = songs.filter(song => song.is_requestable);
                renderSongs(allSongs);

            } catch (error) {
                console.error('Error al cargar la lista de canciones:', error);
                if (resultsContainer) resultsContainer.innerHTML = `<p style="color: red;">Error al cargar canciones. Revisa la consola para m√°s detalles.</p>`;
            }
        }

        async function requestSong(event) {
            if (!event.target.classList.contains('request-btn')) return;
            
            const button = event.target;
            const requestId = button.dataset.requestId;
            button.disabled = true;
            button.textContent = 'Enviando...';

            try {
                const response = await fetch(`/api/send-song-request/${STATION_ID}/${requestId}`, { method: 'POST' });
                if (!response.ok) throw new Error('El servidor devolvi√≥ un error al enviar el pedido.');
                
                const result = await response.json();
                if (result.error) throw new Error(result.error);

                if (result.success) {
                    showStatus(result.message || '¬°Pedido enviado con √©xito!', true);
                } else {
                    throw new Error(result.message || 'No se pudo enviar el pedido.');
                }
            } catch (error) {
                console.error('Error al enviar la petici√≥n:', error);
                showStatus(error.message, false);
            } finally {
                setTimeout(() => {
                    button.disabled = false;
                    button.textContent = 'Pedir';
                }, 60000);
            }
        }
        
        function filterSongs() {
            const query = searchBox.value.toLowerCase().trim();
            const filteredSongs = allSongs.filter(song => 
                song.song.title.toLowerCase().includes(query) || 
                song.song.artist.toLowerCase().includes(query)
            );
            renderSongs(filteredSongs);
        }

        // Event Listeners
        fetchSongs(); // Cargar canciones al iniciar
        resultsContainer.addEventListener('click', requestSong);
        searchBox.addEventListener('input', filterSongs);
    }

});
</script>
</body>
</html>